/*
 * This file is generated by jOOQ.
 */
package com.provys.catalogue.dbloader.db.tables;


import com.provys.catalogue.dbloader.db.Indexes;
import com.provys.catalogue.dbloader.db.Ker;
import com.provys.catalogue.dbloader.db.Keys;
import com.provys.catalogue.dbloader.db.tables.records.KerEntitygrpTbRecord;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Entity group
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KerEntitygrpTb extends TableImpl<KerEntitygrpTbRecord> {

    private static final long serialVersionUID = 1942225848;

    /**
     * The reference instance of <code>KER.KER_ENTITYGRP_TB</code>
     */
    public static final KerEntitygrpTb KER_ENTITYGRP_TB = new KerEntitygrpTb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KerEntitygrpTbRecord> getRecordType() {
        return KerEntitygrpTbRecord.class;
    }

    /**
     * The column <code>KER.KER_ENTITYGRP_TB.ENTITYGRP_ID</code>. UID
     */
    public final TableField<KerEntitygrpTbRecord, BigInteger> ENTITYGRP_ID = createField("ENTITYGRP_ID", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(38).nullable(false), this, "UID");

    /**
     * The column <code>KER.KER_ENTITYGRP_TB.PARENT_ID</code>. Parent group
     */
    public final TableField<KerEntitygrpTbRecord, BigInteger> PARENT_ID = createField("PARENT_ID", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(38), this, "Parent group");

    /**
     * The column <code>KER.KER_ENTITYGRP_TB.NAME_NM</code>. Internal name
     */
    public final TableField<KerEntitygrpTbRecord, String> NAME_NM = createField("NAME_NM", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "Internal name");

    /**
     * The column <code>KER.KER_ENTITYGRP_TB.NAME</code>. Name of group; translated as NLSNAME
     */
    public final TableField<KerEntitygrpTbRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "Name of group; translated as NLSNAME");

    /**
     * The column <code>KER.KER_ENTITYGRP_TB.X_UPNAME</code>. Calculated column - uppercase of NAME
     */
    public final TableField<KerEntitygrpTbRecord, String> X_UPNAME = createField("X_UPNAME", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "Calculated column - uppercase of NAME");

    /**
     * The column <code>KER.KER_ENTITYGRP_TB.NOTE</code>. Short description; translated as NLSNOTE
     */
    public final TableField<KerEntitygrpTbRecord, String> NOTE = createField("NOTE", org.jooq.impl.SQLDataType.VARCHAR(2000), this, "Short description; translated as NLSNOTE");

    /**
     * The column <code>KER.KER_ENTITYGRP_TB.ORD</code>. Ordering of entity groups within their parent / absolute; items with same ORD are sorted using name
     */
    public final TableField<KerEntitygrpTbRecord, Integer> ORD = createField("ORD", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("100 ", org.jooq.impl.SQLDataType.INTEGER)), this, "Ordering of entity groups within their parent / absolute; items with same ORD are sorted using name");

    /**
     * Create a <code>KER.KER_ENTITYGRP_TB</code> table reference
     */
    public KerEntitygrpTb() {
        this(DSL.name("KER_ENTITYGRP_TB"), null);
    }

    /**
     * Create an aliased <code>KER.KER_ENTITYGRP_TB</code> table reference
     */
    public KerEntitygrpTb(String alias) {
        this(DSL.name(alias), KER_ENTITYGRP_TB);
    }

    /**
     * Create an aliased <code>KER.KER_ENTITYGRP_TB</code> table reference
     */
    public KerEntitygrpTb(Name alias) {
        this(alias, KER_ENTITYGRP_TB);
    }

    private KerEntitygrpTb(Name alias, Table<KerEntitygrpTbRecord> aliased) {
        this(alias, aliased, null);
    }

    private KerEntitygrpTb(Name alias, Table<KerEntitygrpTbRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Entity group"));
    }

    public <O extends Record> KerEntitygrpTb(Table<O> child, ForeignKey<O, KerEntitygrpTbRecord> key) {
        super(child, key, KER_ENTITYGRP_TB);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ker.KER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.KER_ENTITYGRP_NM_IX, Indexes.KER_ENTITYGRP_ORD_IX, Indexes.KER_ENTITYGRP_PARENT_IX, Indexes.KER_ENTITYGRP_PK, Indexes.KER_ENTITYGRP_UPNAME_IX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<KerEntitygrpTbRecord> getPrimaryKey() {
        return Keys.KER_ENTITYGRP_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<KerEntitygrpTbRecord>> getKeys() {
        return Arrays.<UniqueKey<KerEntitygrpTbRecord>>asList(Keys.KER_ENTITYGRP_PK, Keys.KER_ENTITYGRP_UPNAME_UK, Keys.KER_ENTITYGRP_NM_UK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<KerEntitygrpTbRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<KerEntitygrpTbRecord, ?>>asList(Keys.KER_ENTITYGRP_PARENT_FK);
    }

    public com.provys.catalogue.dbloader.db.tables.KerEntitygrpTb kerEntitygrpTb() {
        return new com.provys.catalogue.dbloader.db.tables.KerEntitygrpTb(this, Keys.KER_ENTITYGRP_PARENT_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KerEntitygrpTb as(String alias) {
        return new KerEntitygrpTb(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KerEntitygrpTb as(Name alias) {
        return new KerEntitygrpTb(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public KerEntitygrpTb rename(String name) {
        return new KerEntitygrpTb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public KerEntitygrpTb rename(Name name) {
        return new KerEntitygrpTb(name, null);
    }
}
