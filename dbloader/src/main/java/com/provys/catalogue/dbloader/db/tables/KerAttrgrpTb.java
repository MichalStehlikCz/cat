/*
 * This file is generated by jOOQ.
 */
package com.provys.catalogue.dbloader.db.tables;


import com.provys.catalogue.dbloader.db.Indexes;
import com.provys.catalogue.dbloader.db.Ker;
import com.provys.catalogue.dbloader.db.Keys;
import com.provys.catalogue.dbloader.db.tables.records.KerAttrgrpTbRecord;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KerAttrgrpTb extends TableImpl<KerAttrgrpTbRecord> {

    private static final long serialVersionUID = -1618336959;

    /**
     * The reference instance of <code>KER.KER_ATTRGRP_TB</code>
     */
    public static final KerAttrgrpTb KER_ATTRGRP_TB = new KerAttrgrpTb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KerAttrgrpTbRecord> getRecordType() {
        return KerAttrgrpTbRecord.class;
    }

    /**
     * The column <code>KER.KER_ATTRGRP_TB.ATTRGRP_ID</code>.
     */
    public final TableField<KerAttrgrpTbRecord, BigInteger> ATTRGRP_ID = createField("ATTRGRP_ID", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(38).nullable(false), this, "");

    /**
     * The column <code>KER.KER_ATTRGRP_TB.ENTITY_ID</code>.
     */
    public final TableField<KerAttrgrpTbRecord, BigInteger> ENTITY_ID = createField("ENTITY_ID", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(38).nullable(false), this, "");

    /**
     * The column <code>KER.KER_ATTRGRP_TB.ISCUSTOM</code>.
     */
    public final TableField<KerAttrgrpTbRecord, String> ISCUSTOM = createField("ISCUSTOM", org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.field("'N' ", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>KER.KER_ATTRGRP_TB.NAME_NM</code>. Internal name of attribute group
     */
    public final TableField<KerAttrgrpTbRecord, String> NAME_NM = createField("NAME_NM", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "Internal name of attribute group");

    /**
     * The column <code>KER.KER_ATTRGRP_TB.NAME</code>.
     */
    public final TableField<KerAttrgrpTbRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>KER.KER_ATTRGRP_TB.ORD</code>.
     */
    public final TableField<KerAttrgrpTbRecord, Integer> ORD = createField("ORD", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("100 ", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>KER.KER_ATTRGRP_TB.NOTE</code>. Notes regarding attributes in group and their usage
     */
    public final TableField<KerAttrgrpTbRecord, String> NOTE = createField("NOTE", org.jooq.impl.SQLDataType.VARCHAR(4000), this, "Notes regarding attributes in group and their usage");

    /**
     * Create a <code>KER.KER_ATTRGRP_TB</code> table reference
     */
    public KerAttrgrpTb() {
        this(DSL.name("KER_ATTRGRP_TB"), null);
    }

    /**
     * Create an aliased <code>KER.KER_ATTRGRP_TB</code> table reference
     */
    public KerAttrgrpTb(String alias) {
        this(DSL.name(alias), KER_ATTRGRP_TB);
    }

    /**
     * Create an aliased <code>KER.KER_ATTRGRP_TB</code> table reference
     */
    public KerAttrgrpTb(Name alias) {
        this(alias, KER_ATTRGRP_TB);
    }

    private KerAttrgrpTb(Name alias, Table<KerAttrgrpTbRecord> aliased) {
        this(alias, aliased, null);
    }

    private KerAttrgrpTb(Name alias, Table<KerAttrgrpTbRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> KerAttrgrpTb(Table<O> child, ForeignKey<O, KerAttrgrpTbRecord> key) {
        super(child, key, KER_ATTRGRP_TB);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ker.KER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.KER_ATTRGRP_ENTITYNM_IX, Indexes.KER_ATTRGRP_ENTITY_IX, Indexes.KER_ATTRGRP_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<KerAttrgrpTbRecord> getPrimaryKey() {
        return Keys.KER_ATTRGRP_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<KerAttrgrpTbRecord>> getKeys() {
        return Arrays.<UniqueKey<KerAttrgrpTbRecord>>asList(Keys.KER_ATTRGRP_PK, Keys.KER_ATTRGRP_ENTANDNAME_UK, Keys.KER_ATTRGRP_ENTITYNM_UK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<KerAttrgrpTbRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<KerAttrgrpTbRecord, ?>>asList(Keys.KER_ATTRGRP_ENTITY_FK);
    }

    public KerEntityTb kerEntityTb() {
        return new KerEntityTb(this, Keys.KER_ATTRGRP_ENTITY_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KerAttrgrpTb as(String alias) {
        return new KerAttrgrpTb(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KerAttrgrpTb as(Name alias) {
        return new KerAttrgrpTb(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public KerAttrgrpTb rename(String name) {
        return new KerAttrgrpTb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public KerAttrgrpTb rename(Name name) {
        return new KerAttrgrpTb(name, null);
    }
}
